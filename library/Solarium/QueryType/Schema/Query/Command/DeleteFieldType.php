<?php
/** 
 * DeleteFieldType.php
 * Generated by PhpStorm - 06/2015
 * Project solarium
 * @author Beno!t POLASZEK
**/

namespace Solarium\QueryType\Schema\Query\Command;


use Solarium\Core\ArrayableInterface;
use Solarium\QueryType\Schema\Query\FieldType\FieldType;
use Solarium\QueryType\Schema\Query\FieldType\FieldTypeInterface;
use Solarium\QueryType\Schema\Query\Query as SchemaQuery;

class DeleteFieldType extends Command implements ArrayableInterface {
    /**
     * @var FieldTypeInterface[]
     */
    protected $fieldTypes = array();

    /**
     * Returns command type, for use in adapters
     *
     * @return string
     */
    public function getType() {
        return SchemaQuery::COMMAND_DELETE_FIELD_TYPE;
    }

    /**
     * @return FieldTypeInterface[]
     */
    public function getFieldTypes() {
        return $this->fieldTypes;
    }

    /**
     * @param FieldTypeInterface[] $fieldTypes
     * @return $this - Provides Fluent Interface
     */
    public function setFieldTypes(array $fieldTypes) {
        $this->fieldTypes = array();
        $this->addFieldTypes($fieldTypes);
        return $this;
    }

    /**
     * @param FieldTypeInterface $fieldType
     * @return $this
     */
    public function addFieldType(FieldTypeInterface $fieldType) {
        $this->fieldTypes[] = $fieldType;
        return $this;
    }

    /**
     * @param FieldTypeInterface[] $fieldTypes
     * @return $this - Provides Fluent Interface
     */
    public function addFieldTypes(array $fieldTypes) {
        foreach ($fieldTypes AS $fieldType)
            $this->addFieldType($fieldType);
        return $this;
    }

    /**
     * @param null $name
     * @param null $class
     * @return FieldType
     */
    public function createFieldType($name = null, $class = null) {
        $fieldType = new FieldType($name, $class);
        $this->addFieldType($fieldType);
        return $fieldType;
    }

    /**
     * @return array
     */
    public function castAsArray() {
        return array_values(array_map(function (FieldTypeInterface $fieldType) {
            return array('name' => $fieldType->getName());
        }, $this->getFieldTypes()));
    }


}