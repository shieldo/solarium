<?php
/** 
 * StandardAnalyzer.php
 * Generated by PhpStorm - 06/2015
 * Project solarium
 * @author Beno!t POLASZEK
**/

namespace Solarium\QueryType\Schema\Query\FieldType\Analyzer;


use Solarium\QueryType\Schema\Query\FieldType\Analyzer\Filter\Filter;
use Solarium\QueryType\Schema\Query\FieldType\Analyzer\Filter\FilterInterface;
use Solarium\QueryType\Schema\Query\FieldType\Analyzer\Tokenizer\Tokenizer;
use Solarium\QueryType\Schema\Query\FieldType\Analyzer\Tokenizer\TokenizerInterface;

class StandardAnalyzer implements AnalyzerInterface {

    protected $class;
    protected $tokenizer;
    protected $filters = array();

    /**
     * Analyzer type. Can be 'analyzer', 'indexAnalyzer', or 'queryAnalyzer'
     * @see https://cwiki.apache.org/confluence/display/solr/Analyzers
     * @return string|null
     */
    public function getType() {
        return 'analyzer';
    }

    /**
     * @return string|null
     */
    public function getClass() {
        return $this->class;
    }

    /**
     * @param string $class
     * @return $this - Provides Fluent Interface
     */
    public function setClass($class) {
        $this->class = $class;
        return $this;
    }

    /**
     * @return TokenizerInterface
     */
    public function getTokenizer() {
        return $this->tokenizer;
    }

    /**
     * @param TokenizerInterface  $tokenizer
     * @return $this - Provides Fluent Interface
     */
    public function setTokenizer(TokenizerInterface $tokenizer) {
        $this->tokenizer = $tokenizer;
        return $this;
    }

    /**
     * @param null $class
     * @param null $delimiter
     * @return Tokenizer
     */
    public function createTokenizer($class = null, $delimiter = null) {
        $tokenizer = new Tokenizer($class, $delimiter);
        $this->setTokenizer($tokenizer);
        return $tokenizer;
    }

    /**
     * @return FilterInterface[]
     */
    public function getFilters() {
        return $this->filters;
    }

    /**
     * @param FilterInterface $filter
     * @return $this
     */
    public function addFilter(FilterInterface $filter) {
        $this->filters[] = $filter;
        return $this;
    }

    /**
     * @param FilterInterface[] $filters
     * @return $this - Provides Fluent Interface
     */
    public function setFilters(array $filters) {
        $this->filters = array();
        foreach ($filters AS $filter)
            $this->addFilter($filter);
        return $this;
    }

    /**
     * @param       $class
     * @param array $attributes
     * @return Filter
     */
    public function createFilter($class, $attributes = array()) {
        $filter = new Filter($class, $attributes);
        $this->addFilter($filter);
        return $filter;
    }

    /**
     * Get the instance as an array.
     *
     * @return array
     */
    public function castAsArray() {

        $out = array('class' => $this->getClass());

        if ($this->getTokenizer()) {
            $out['tokenizer'] = $this->getTokenizer()->castAsArray();
        }

        if ($this->getFilters()) {
            $out['filters'] = array_map(function (FilterInterface $filter) {
                return $filter->castAsArray();
            }, $this->getFilters());
        }

        return $out;
    }

}